{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red57\green57\blue57;\red255\green255\blue255;\red38\green38\blue38;
\red245\green245\blue248;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs36 \cf0 difference between append and push?\
\
enumerate = loops? like compiling?\
spectacle- app to move and resize windows with keyboard shortcuts\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 variables are pointers, not containers!!
\b0 \
\
built-in methods start with \'93.\'94 as in .toUpperCase();\
\
difference between == and ===?\
	 === is more reliable. == doesn\'92t always work how you think it 	will. not a mistake, == is just for a very specific use case.\
\
no semicolons after curly braces\'85ever?\
\
how to use pop? only removes last element from array - can you target index position? - use .splice. Changing an array is actually a relatively expensive procedure - if you\'92re already in the kitchen, do it all at once, don\'92t do things separately.\
\
arrays are square brackets [ ]\
\
objects are keys and values, use curly braces \{ \}\
\
number += 1 \
	is the same as\
number = number + 1 \
	and\
number ++\
	- this is specifically designed to work in a \'91for loop\'92 but is tricky and doesn\'92t always work like you\'92d expect it to and not recommended for beginners outside of that context.\
\
for loops relate to collections (i.e. arrays and objects)\
\pard\tx720\tx1269\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li809\fi474\pardirnatural
\cf0 while loops could work for the same thing, but not recommended. more on that later.\
\pard\tx720\tx784\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li785\fi448\pardirnatural
\cf0 for each loops - a way JS gives you to do parts of this automatically, but \'91for loops\'92 are really what JS is doing under the hood with that automatic process anyway. \'91for loops\'92 are foundational to for each loops\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
objects don\'92t guarantee sequential order, but arrays do.\
\
\'93primitives\'94 (string, boolean and Interger/floats) use 
\b pass-by values (because of memory expense) 
\b0 - they don\'92t go back and check for value re-assignment. They just execute once and remember their value. Must be manually updated each time.\
\
\'93composites\'94 (arrays, objects) use 
\b pass-by reference (because of memory expense)
\b0  will update automatically or point to the same thing it\'92s assigned to.\
\
function - a reusable block of code that you can pass arguments into for different outcomes.\
\
DOM - Document Object Model, living presentation of an HTML document, HtML itself is jut plain old text. A web browser simply parses HTML into data, then uses it to assemble into an interactive program. This interactive program is the DOM.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 event listeners\
hoisting\
recursion\
ajax\
json\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 \ul \ulc0 Day 2 - \ulnone \
	
\b arguments & returns\
	call vs reference\
	declaration vs. Assignment\
	First-Class functions\
	closure & scope 
\b0 (twilight zone) \
	-set up a function\
	function beep () \{\
		\
	\}\
	the function is a black box. only people inside of them can see what's there. it is a closure. scope is the stuff that exists inside the function. someone inside the function can see what's inside, and they can see up the chain that it is a child of.\
\
window - global scope,\
nested scope/ closures can happen in declarations - either functions or variables.
\b \
	contextual invocation 
\b0 (the midnight zone, this is the harder part of this workshop) \
\
	this\
	function needs to be bound to an object - "this"\
\
** declaration is globally available, assignment only happens in order\
\
SetTimeout (fn, x) 
\f1\fs32 \cf2 \cb3 	\'95	(which queues a function 
\f2\fs28 \cf4 \cb5 f
\f1\fs32 \cf2 \cb3  to be invoked after 
\f2\fs28 \cf4 \cb5 x
\f1\fs32 \cf2 \cb3 milliseconds, though the actual delay could be longer)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480
\ls1\ilvl0
\f2\fs28 \cf4 \cb5 {\listtext	\'95	}setInterval(fn, x)
\f1\fs32 \cf2 \cb3  (which allows repeated invocations of function 
\f2\fs28 \cf4 \cb5 fn
\f1\fs32 \cf2 \cb3  with a delay of 
\f2\fs28 \cf4 \cb5 x
\f1\fs32 \cf2 \cb3  between each - though the delay could be longer).\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs36 \cf0 \cb1 \
\
x\
	\
	\
\
}